package view.userView;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.text.Text;
import javafx.scene.control.*;
import javafx.stage.Modality;
import javafx.stage.Stage;
import model.Feedback;
import model.User;

import java.io.IOException;
import java.util.List;

import controller.FeedbackController;

public class FeedbackView {

    @FXML
    private Label pageTitle;
    @FXML
    private TableView<Feedback> feedbackTable;
    @FXML
    private TableColumn<Feedback, String> typeColumn;
    @FXML
    private TableColumn<Feedback, String> commentColumn;
    @FXML
    private TableColumn<Feedback, String> statusColumn;
    @FXML
    private TableColumn<Feedback, String> dateColumn;
    @FXML
    private TableColumn<Feedback, Void> responseCommentColumn;
    @FXML
    private Button addFeedbackButton;

    private User currentUser;
    private final ObservableList<Feedback> feedbackList = FXCollections.observableArrayList();
    private final FeedbackController feedbackController = new FeedbackController();

    public void setCurrentUser(User user) {
        this.currentUser = user;
        loadFeedbacks();
    }

    @FXML
    public void initialize() {
        pageTitle.setText("Danh s√°ch Feedback c·ªßa b·∫°n");

        typeColumn.setCellValueFactory(data -> data.getValue().feedbackTypeProperty());
        commentColumn.setCellValueFactory(data -> data.getValue().commentProperty());
        statusColumn.setCellValueFactory(data -> data.getValue().statusProperty());
        dateColumn.setCellValueFactory(data -> data.getValue().feedbackDateProperty());
        responseCommentColumn.setCellFactory(data -> new TableCell<Feedback, Void>() {
            private final Button btn = new Button("Chi ti·∫øt");

            {
                btn.setPrefWidth(200);
                btn.setOnAction(event -> {
                    Feedback feedback = getTableView().getItems().get(getIndex());
                    // L·∫•y n·ªôi dung ph·∫£n h·ªìi
                    

                    // Hi·ªÉn th·ªã trong Alert (popup)
                    Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setTitle("Chi ti·∫øt ph·∫£n h·ªìi");
                    Label headerLabel = new Label("üì© Ph·∫£n h·ªìi t·ª´ ph√≤ng t·∫≠p");
                    headerLabel.setStyle("-fx-font-size: 20px; -fx-font-weight: bold; -fx-text-fill: #1e88e5;");

                    alert.setHeaderText(null); // T·∫Øt header m·∫∑c ƒë·ªãnh
                    alert.getDialogPane().setHeader(headerLabel); // ƒê·∫∑t header m·ªõi

                    String response = feedback.responseCommentProperty().get();
                    String content = (response != null && !response.isEmpty()) ? response : "Kh√¥ng c√≥ ph·∫£n h·ªìi.";

                    // D√πng Text ƒë·ªÉ c√≥ th·ªÉ tƒÉng font v√† xu·ªëng d√≤ng
                    Text contentText = new Text(content);
                    contentText.setWrappingWidth(520);
                    contentText.setStyle("-fx-font-size: 16px; -fx-fill: #333333;");
                    alert.getDialogPane().setContent(contentText);
                    // T√πy ch·ªânh giao di·ªán popup
                    // T√πy ch·ªânh DialogPane
                    DialogPane dialogPane = alert.getDialogPane();
                    dialogPane.setMinWidth(640);
                    dialogPane.setMinHeight(360);
                    dialogPane.setStyle(
                        "-fx-background-color: linear-gradient(to bottom right, #ffffff, #e3f2fd);" +
                        "-fx-border-color: #90caf9;" +
                        "-fx-border-width: 2px;" +
                        "-fx-border-radius: 12;" +
                        "-fx-background-radius: 12;" +
                        "-fx-padding: 24;" +
                        "-fx-font-family: 'Segoe UI', sans-serif;" +
                        "-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.2), 10, 0, 0, 4);"
                    );
                    // T√πy ch·ªânh n√∫t OK
                    Button okButton = (Button) dialogPane.lookupButton(ButtonType.OK);
                    okButton.setStyle(
                        "-fx-background-color: #42a5f5;" +
                        "-fx-text-fill: white;" +
                        "-fx-font-size: 14px;" +
                        "-fx-font-weight: bold;" +
                        "-fx-background-radius: 8;" +
                        "-fx-padding: 8 20;" +
                        "-fx-cursor: hand;"
                    );

                    //Hi·ªÉn th·ªã
                    alert.showAndWait();
                });
                btn.setStyle("-fx-background-color: #4FC3F7; -fx-text-fill: #232930; -fx-font-weight: bold; -fx-background-radius: 8; -fx-cursor: hand;");
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    setGraphic(btn);
                }
            }
        });


        feedbackTable.setItems(feedbackList);
    }

    private void loadFeedbacks() {
        if (currentUser == null) return;
        
        try {
            // L·∫•y feedback t·ª´ database
            int MemberId = feedbackController.getMemberIdByUserId(currentUser.getUserId());
            List<Feedback> feedbacks = feedbackController.getFeedbacksByMemberID(MemberId);
            feedbackList.clear();
            feedbackList.addAll(feedbacks);
            
            System.out.println("ƒê√£ load " + feedbacks.size() + " feedback t·ª´ database");
            
        } catch (Exception e) {
            System.err.println("L·ªói khi load feedback: " + e.getMessage());
            e.printStackTrace();
            
            // Fallback: hi·ªÉn th·ªã danh s√°ch tr·ªëng
            feedbackList.clear();
        }
    }
    @FXML
    private void handleAddFeedback() {
        try {
            // File FXML c√πng th∆∞ m·ª•c v·ªõi Controller
            String fxmlPath = "feedbackForm.fxml";
            
            // Debug: In ra ƒë∆∞·ªùng d·∫´n ƒë·ªÉ ki·ªÉm tra
            System.out.println("Trying to load FXML from same package: " + fxmlPath);
            
            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(getClass().getResource(fxmlPath));
            
            if (loader.getLocation() == null) {
                showAlert("L·ªói", "Kh√¥ng t√¨m th·∫•y file feedbackForm.fxml t·∫°i ƒë∆∞·ªùng d·∫´n: " + fxmlPath);
                return;
            }

            Stage formStage = new Stage();
            Scene scene = new Scene(loader.load());
            formStage.setScene(scene);
            formStage.setTitle("Th√™m Feedback");
            formStage.initModality(Modality.APPLICATION_MODAL);
            formStage.setResizable(false);

            FeedbackFormController controller = loader.getController();
            controller.setUser(currentUser);
            controller.setFeedbackController(feedbackController);
            controller.setFeedbackSubmittedCallback(v -> loadFeedbacks()); // Reload t·ª´ DB

            formStage.showAndWait();
            
        } catch (IOException e) {
            System.err.println("L·ªói khi m·ªü form feedback: " + e.getMessage());
            e.printStackTrace();
            showAlert("L·ªói", "Kh√¥ng th·ªÉ m·ªü form th√™m feedback. L·ªói: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("L·ªói kh√¥ng x√°c ƒë·ªãnh: " + e.getMessage());
            e.printStackTrace();
            showAlert("L·ªói", "C√≥ l·ªói kh√¥ng x√°c ƒë·ªãnh x·∫£y ra: " + e.getMessage());
        }
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

}